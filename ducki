#!/usr/bin/env node

var express        = require('express')
  , http           = require('http')
  , path           = require('path')
  , passport       = require('passport')
  , Fs             = require('fs')
  , Git            = require('./lib/gitmech')
  , Tools          = require('./lib/tools')
  , Config         = require('./lib/config')
  , Components     = require('./lib/components')
  , expValidator   = require('express-validator')
  , gravatar       = require('gravatar')
  , Url            = require('url')
  , GoogleStrategy = require('passport-google').Strategy
  , LocalStrategy  = require('passport-local').Strategy
  , Flash          = require('connect-flash')
  , program        = require('commander');

program.version('0.5.1')
       .option('-c, --config <path>', 'Specify the config file')
       .option('-#, --hash-string <string>', 'Create an hash for a string')
       .option('-l, --local', 'Listen on localhost only')
       .option('-s, --sample-config', 'Dumps a config file template and exits')
       .parse(process.argv);

if (program.sampleConfig) {
  console.log(Config.sample());
  process.exit(0);
}

if (program.hashString) {
  console.log(Tools.hashify(program.hashString));
  process.exit(0);
}

if (!program.config ) {
  program.config = "config.yaml";	
}

if (!program.config || !Fs.existsSync(program.config)) {
  program.help();
  process.exit(-1);
}

Config.load(program.config);

try {
  Git.setup(Config.get("application.repository"), Config.get("application.docSubdir", ""));
} catch(e) {
  console.log(e.message)
  program.help()
  process.exit(-1);
}

// Global variables to be accessed from the routes module
global.app = express();
app.locals.Git = Git;
app.locals.Components = Components;
app.locals.appTitle = Config.get("application.title", "Ducki");
app.locals.port = Config.get("server.port", process.env.PORT || 6067);
app.locals.hostname = Config.get("server.hostname", "localhost");
app.locals.features = Config.get("features", {});

// For backward compatibility with version < 0.5, we set markitup as the
// default rich editor. For new installations, the default is codemirror
if (typeof app.locals.features.codemirror == 'undefined' &&
    typeof app.locals.features.markitup == 'undefined') {
  app.locals.features.markitup = true;
}

// This should never happen, of course
if (app.locals.features.markitup && 
    app.locals.features.codemirror) {
  app.locals.features.markitup = false;
}

// baseUrl is used as the public url
app.locals.baseUrl = Config.get("server.baseUrl", ("http://" + app.locals.hostname + ":" + app.locals.port));
app.locals.authorization = Config.get("authorization", { anonRead: false, validMatches: ".+" });
app.locals.secret = Config.get("application.secret", "jingo-secret-67");

var refspec = Config.get("application.remote") ? Config.get("application.remote").split(/\s+/) : "";
if (!refspec) {
  app.locals.remote = "";
  app.locals.branch = "";
} else {
  app.locals.remote = refspec[0].trim();
  app.locals.branch = refspec[1] ? refspec[1].trim() : "master";
}

app.locals.pushInterval = Config.get("application.pushInterval") ? parseInt(Config.get("application.pushInterval"), 10) * 1000 : 30000;
app.locals.coalesce = function(value, def) {
  return typeof value === 'undefined' ? def : value;
}
app.locals.pretty = true; // Pretty HTML output from Jade

var auth = app.locals.authentication = Config.get("authentication", { google: { enabled: true }, alone: { enabled: false } });

if ( (!auth.google || !auth.google.enabled) && 
     (!auth.alone  || !auth.alone.enabled) ) {
  console.log("Error: no authentication method provided. Cannot continue.");
  process.exit(-1);
}

Components.init(Git);

var routes = require("./routes");

app.configure(function() {
  app.use(express.errorHandler());
  app.set('port', app.locals.port);
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.favicon());
  app.use(express.static(path.join(__dirname, 'public')));
  app.use(express.logger('default'));
  app.use(express.cookieParser(app.locals.secret));
  app.use(express.cookieSession({ secret: "jingo-" + app.locals.secret, cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 }})); // a Month
  app.use(express.bodyParser());
  app.use(expValidator());
  app.use(express.methodOverride());
  app.use(passport.initialize());
  app.use(passport.session());
  app.use(Flash());
  app.use(function (req, res, next) {
    res.locals({
      get user() {
        return req.user;
      },
      isAnonymous: function () {
        return !req.user;
      },
      canSearch: function () {
        return !!req.user || app.locals.authorization.anonRead;
      },
      gravatar: function(email) {
        return gravatar;
      },
      hasSidebar: Components.hasSidebar,
      hasFooter: Components.hasFooter,
      hasCustomStyle: Components.hasCustomStyle,
      hasCustomScript: Components.hasCustomScript,
      hasFeature: function(feature) {
        return !!app.locals.features[feature]
      }
    });

    next();
  });

  // Logic to include custom _footer, _sidebar, _script and _style.css
  app.use(function (req, res, next) {

    if (null === req.url.match(/^\/auth\//) &&
        null === req.url.match(/^\/misc\//) &&
        null === req.url.match(/^\/login/)) {
      Components.sidebar(function(content) { res.locals._sidebar = content; });
      Components.footer(function(content) { res.locals._footer = content; });
    }

    res.locals._style  = Components.customStyle();
    res.locals._script = Components.customScript();

    next();
  });

  app.use(app.router);
});

function requireAuthentication(req, res, next) {
  if (!res.locals.user) {
    res.redirect("/login");
  } else {
    next();
  }
}

/* 
 * Passport configuration
 */

passport.use(new GoogleStrategy({
    returnURL: app.locals.baseUrl + '/auth/google/return',
    realm: app.locals.baseUrl
  },

  function(identifier, profile, done) {
    usedAuthentication("google");
    done(undefined, profile);
  }
));

passport.use(new LocalStrategy(

  function(username, password, done) {

    var user = {
      displayName: auth.alone.username,
      email: auth.alone.email || ""
    };

    if (username.toLowerCase() != auth.alone.username.toLowerCase() || Tools.hashify(password) != auth.alone.passwordHash) {
      return done(null, false, { message: 'Incorrect username or password' });
    }

    usedAuthentication("alone");

    return done(null, user);
  }
));

passport.serializeUser(function(user, done) {
  done(null, user);
});

passport.deserializeUser(function(user, done) {
  if (user.emails && user.emails.length > 0) { // Google
    user.email = user.emails[0].value;
    delete user.emails;
  }
  user.asGitAuthor = user.displayName + " <" + user.email + ">"; 
  done(undefined, user);
});

function usedAuthentication(name) {
  for (var a in app.locals.authentication) {
    app.locals.authentication[a].used = (a == name);
  }
}

app.all("/pages/*", requireAuthentication);

if (!app.locals.authorization.anonRead) {
  app.all("/wiki/*", requireAuthentication);
  app.all("/search", requireAuthentication);
}

app.get    ("/",                      routes.index);
app.get    ("/wiki",                  routes.pageList);
app.get    ("/wiki/:page",            routes.pageShow);
app.get    ("/wiki/:page/history",    routes.pageHistory);
app.get    ("/wiki/:page/:version",   routes.pageShow);
app.get    ("/wiki/:page/compare/:revisions", routes.pageCompare);

app.get    ("/search",                routes.search);

app.get    ("/pages/new",             routes.pageNew);
app.get    ("/pages/new/:page",       routes.pageNew);
app.post   ("/pages",                 routes.pageCreate);

app.get    ("/pages/:page/edit",      routes.pageEdit);
app.put    ("/pages/:page",           routes.pageUpdate);
app.delete ("/pages/:page",           routes.pageDestroy);

app.post   ("/misc/preview",          routes.miscPreview);
app.get    ("/misc/syntax-reference", routes.miscSyntaxReference);
app.get    ("/misc/existence",        routes.miscExistence);

app.post   ("/login",                 passport.authenticate('local', { successRedirect: '/auth/done', failureRedirect: '/login', failureFlash: true }));
app.get    ("/login",                 routes.login);
app.get    ("/logout",                routes.logout);

app.get    ("/auth/google",           passport.authenticate('google'));
app.get    ("/auth/google/return",    passport.authenticate('google', { successRedirect: '/auth/done', failureRedirect: '/login' }));
app.get    ("/auth/done",             routes.authDone);

app.all('*', routes.error404);

var listenAddr = process.env.NW_ADDR || "";
if (Config.get("server.localOnly")) {
  listenAddr = "localhost";
}

http.createServer(app).listen(app.get('port'), listenAddr, function(){
  console.log((new Date()) + " - Jingo%sserver v%s listening on port %s", Config.get("server.localOnly") ? " (local) " : " ", program.version(), app.get('port'));
});

if (app.locals.remote != "") {
  setInterval(function() {
    Git.pull(app.locals.remote, app.locals.branch, function(err) {
      if (err) {
        console.log("Error: " + err);
      } else {
        Git.push(app.locals.remote, app.locals.branch, function(err) {
          if (err) {
            console.log("Error: " + err);
          }
        });
      }
    });
  }, app.locals.pushInterval);
}
